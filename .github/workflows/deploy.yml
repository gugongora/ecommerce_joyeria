name: CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  # Permite ejecutarlo manualmente desde la pestaña Actions
  workflow_dispatch: {}

jobs:
  test:
    name: Django checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # deps mínimas si no tienes requirements.txt
            pip install django django-environ djangorestframework drf-yasg djangorestframework-simplejwt
          fi

      - name: Run Django checks
        run: |
          python manage.py check --deploy

      # (Opcional) agrega tus tests cuando estén listos
      # - name: Run tests
      #   run: python manage.py test

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: test
    # Solo desplegar en pushes a main (no en PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure rsync is available (runner side)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rsync

      - name: Prepare SSH
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Escribe la clave privada desde el secret
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          # Conocer la host key de github.com (por si haces submódulos) y del VPS
          ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null || true

          # Toma el puerto (con default 22) y agrega known_hosts del VPS
          SSH_PORT="${{ secrets.SSH_PORT }}"
          if [ -z "${SSH_PORT}" ]; then SSH_PORT=22; fi
          ssh-keyscan -p "$SSH_PORT" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null || true
          chmod 644 ~/.ssh/known_hosts

      - name: Rsync code to server
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        run: |
          set -euo pipefail
          # Defaults si no definiste opcionales
          : "${SSH_PORT:=22}"
          : "${REMOTE_PATH:=/srv/gongorajoyeria/app}"

          # Sincroniza el repo al VPS (excluyendo lo sensible o generado)
          rsync -avz --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "venv" \
            --exclude ".env" \
            --exclude "staticfiles" \
            --exclude "media" \
            --exclude "node_modules" \
            -e "ssh -p $SSH_PORT -i ~/.ssh/id_ed25519" \
            ./ "${SSH_USER}@${SSH_HOST}:${REMOTE_PATH}/"

      - name: Run deploy script on server
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          REMOTE_SCRIPT: ${{ secrets.REMOTE_SCRIPT }}
        run: |
          set -euo pipefail
          : "${SSH_PORT:=22}"
          : "${REMOTE_SCRIPT:=/srv/gongorajoyeria/deploy/deploy.sh}"

          ssh -p "$SSH_PORT" -i ~/.ssh/id_ed25519 "${SSH_USER}@${SSH_HOST}" "bash '$REMOTE_SCRIPT'"

      # (Opcional) Healthcheck post-deploy
      - name: Healthcheck
        run: |
          curl -I https://gongorajoyeria.com/ || exit 1

